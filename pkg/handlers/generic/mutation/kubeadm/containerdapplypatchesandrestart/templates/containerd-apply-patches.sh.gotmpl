#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# This script is used to merge the TOML files in the patch directory into the containerd configuration file.

# Check if there are any TOML files in the patch directory, exiting if none are found.
# Use a for loop that will only run a maximum of once to check if there are any files in the patch directory because
# using -e does not work with globs.
# See https://github.com/koalaman/shellcheck/wiki/SC2144 for an explanation of the following loop.
patches_exist=false
for file in "{{ .PatchDir }}"/*.toml; do
  if [ -e "${file}" ]; then
    patches_exist=true
  fi
  # Always break after the first iteration.
  break
done

if [ "${patches_exist}" = false ]; then
  echo "No TOML files found in the patch directory: {{ .PatchDir }} - nothing to do"
  exit 0
fi

# Use go template variable to avoid hard-coding the toml-merge image name in this script.
declare -r TOML_MERGE_IMAGE="{{ .TOMLMergeImage }}"

# Check if the toml-merge image is already present in ctr images list, if not pull it.
if ! ctr --namespace k8s.io images check "name==${TOML_MERGE_IMAGE}" | grep "${TOML_MERGE_IMAGE}" >/dev/null; then
  ctr --namespace k8s.io images pull "${TOML_MERGE_IMAGE}"
fi

# Cleanup the temporary directory on exit.
cleanup() {
  ctr images unmount "${tmp_ctr_mount_dir}" || true
}
trap 'cleanup' EXIT

# Create a temporary directory to mount the toml-merge image filesystem.
readonly tmp_ctr_mount_dir="$(mktemp -d)"

# Mount the toml-merge image filesystem and run the toml-merge binary to merge the TOML files.
ctr --namespace k8s.io images mount "${TOML_MERGE_IMAGE}" "${tmp_ctr_mount_dir}"
"${tmp_ctr_mount_dir}/usr/local/bin/toml-merge" -i --patch-file "{{ .PatchDir }}/*.toml" /etc/containerd/config.toml
