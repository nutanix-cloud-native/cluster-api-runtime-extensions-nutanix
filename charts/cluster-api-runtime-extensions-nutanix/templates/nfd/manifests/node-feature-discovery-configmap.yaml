# Copyright 2024 Nutanix. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

#=================================================================
#                 DO NOT EDIT THIS FILE
#  IT HAS BEEN GENERATED BY /hack/addons/update-node-feature-discovery-manifests.sh
#=================================================================
apiVersion: v1
data:
  node-feature-discovery.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      labels:
        pod-security.kubernetes.io/enforce: privileged
        pod-security.kubernetes.io/enforce-version: latest
      name: node-feature-discovery
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.12.1
      name: nodefeatures.nfd.k8s-sigs.io
    spec:
      group: nfd.k8s-sigs.io
      names:
        kind: NodeFeature
        listKind: NodeFeatureList
        plural: nodefeatures
        singular: nodefeature
      scope: Namespaced
      versions:
      - name: v1alpha1
        schema:
          openAPIV3Schema:
            description: NodeFeature resource holds the features discovered for one node
              in the cluster.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: NodeFeatureSpec describes a NodeFeature object.
                properties:
                  features:
                    description: Features is the full "raw" features data that has been
                      discovered.
                    properties:
                      attributes:
                        additionalProperties:
                          description: AttributeFeatureSet is a set of features having
                            string value.
                          properties:
                            elements:
                              additionalProperties:
                                type: string
                              type: object
                          required:
                          - elements
                          type: object
                        description: Attributes contains all the attribute-type features
                          of the node.
                        type: object
                      flags:
                        additionalProperties:
                          description: FlagFeatureSet is a set of simple features only
                            containing names without values.
                          properties:
                            elements:
                              additionalProperties:
                                description: Nil is a dummy empty struct for protobuf
                                  compatibility
                                type: object
                              type: object
                          required:
                          - elements
                          type: object
                        description: Flags contains all the flag-type features of the
                          node.
                        type: object
                      instances:
                        additionalProperties:
                          description: InstanceFeatureSet is a set of features each of
                            which is an instance having multiple attributes.
                          properties:
                            elements:
                              items:
                                description: InstanceFeature represents one instance of
                                  a complex features, e.g. a device.
                                properties:
                                  attributes:
                                    additionalProperties:
                                      type: string
                                    type: object
                                required:
                                - attributes
                                type: object
                              type: array
                          required:
                          - elements
                          type: object
                        description: Instances contains all the instance-type features
                          of the node.
                        type: object
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels is the set of node labels that are requested to
                      be created.
                    type: object
                type: object
            required:
            - spec
            type: object
        served: true
        storage: true
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.12.1
      name: nodefeaturerules.nfd.k8s-sigs.io
    spec:
      group: nfd.k8s-sigs.io
      names:
        kind: NodeFeatureRule
        listKind: NodeFeatureRuleList
        plural: nodefeaturerules
        shortNames:
        - nfr
        singular: nodefeaturerule
      scope: Cluster
      versions:
      - name: v1alpha1
        schema:
          openAPIV3Schema:
            description: NodeFeatureRule resource specifies a configuration for feature-based
              customization of node objects, such as node labeling.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: NodeFeatureRuleSpec describes a NodeFeatureRule.
                properties:
                  rules:
                    description: Rules is a list of node customization rules.
                    items:
                      description: Rule defines a rule for node customization such as
                        labeling.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: Annotations to create if the rule matches.
                          type: object
                        extendedResources:
                          additionalProperties:
                            type: string
                          description: ExtendedResources to create if the rule matches.
                          type: object
                        labels:
                          additionalProperties:
                            type: string
                          description: Labels to create if the rule matches.
                          type: object
                        labelsTemplate:
                          description: LabelsTemplate specifies a template to expand for
                            dynamically generating multiple labels. Data (after template
                            expansion) must be keys with an optional value (<key>[=<value>])
                            separated by newlines.
                          type: string
                        matchAny:
                          description: MatchAny specifies a list of matchers one of which
                            must match.
                          items:
                            description: MatchAnyElem specifies one sub-matcher of MatchAny.
                            properties:
                              matchFeatures:
                                description: MatchFeatures specifies a set of matcher
                                  terms all of which must match.
                                items:
                                  description: FeatureMatcherTerm defines requirements
                                    against one feature set. All requirements (specified
                                    as MatchExpressions) are evaluated against each element
                                    in the feature set.
                                  properties:
                                    feature:
                                      description: Feature is the name of the feature
                                        set to match against.
                                      type: string
                                    matchExpressions:
                                      additionalProperties:
                                        description: MatchExpression specifies an expression
                                          to evaluate against a set of input values. It
                                          contains an operator that is applied when matching
                                          the input and an array of values that the operator
                                          evaluates the input against.
                                        properties:
                                          op:
                                            description: Op is the operator to be applied.
                                            enum:
                                            - In
                                            - NotIn
                                            - InRegexp
                                            - Exists
                                            - DoesNotExist
                                            - Gt
                                            - Lt
                                            - GtLt
                                            - IsTrue
                                            - IsFalse
                                            type: string
                                          value:
                                            description: Value is the list of values that
                                              the operand evaluates the input against.
                                              Value should be empty if the operator is
                                              Exists, DoesNotExist, IsTrue or IsFalse.
                                              Value should contain exactly one element
                                              if the operator is Gt or Lt and exactly
                                              two elements if the operator is GtLt. In
                                              other cases Value should contain at least
                                              one element.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - op
                                        type: object
                                      description: MatchExpressions is the set of per-element
                                        expressions evaluated. These match against the
                                        value of the specified elements.
                                      type: object
                                    matchName:
                                      description: MatchName in an expression that is
                                        matched against the name of each element in the
                                        feature set.
                                      properties:
                                        op:
                                          description: Op is the operator to be applied.
                                          enum:
                                          - In
                                          - NotIn
                                          - InRegexp
                                          - Exists
                                          - DoesNotExist
                                          - Gt
                                          - Lt
                                          - GtLt
                                          - IsTrue
                                          - IsFalse
                                          type: string
                                        value:
                                          description: Value is the list of values that
                                            the operand evaluates the input against. Value
                                            should be empty if the operator is Exists,
                                            DoesNotExist, IsTrue or IsFalse. Value should
                                            contain exactly one element if the operator
                                            is Gt or Lt and exactly two elements if the
                                            operator is GtLt. In other cases Value should
                                            contain at least one element.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - op
                                      type: object
                                  required:
                                  - feature
                                  type: object
                                type: array
                            required:
                            - matchFeatures
                            type: object
                          type: array
                        matchFeatures:
                          description: MatchFeatures specifies a set of matcher terms
                            all of which must match.
                          items:
                            description: FeatureMatcherTerm defines requirements against
                              one feature set. All requirements (specified as MatchExpressions)
                              are evaluated against each element in the feature set.
                            properties:
                              feature:
                                description: Feature is the name of the feature set to
                                  match against.
                                type: string
                              matchExpressions:
                                additionalProperties:
                                  description: MatchExpression specifies an expression
                                    to evaluate against a set of input values. It contains
                                    an operator that is applied when matching the input
                                    and an array of values that the operator evaluates
                                    the input against.
                                  properties:
                                    op:
                                      description: Op is the operator to be applied.
                                      enum:
                                      - In
                                      - NotIn
                                      - InRegexp
                                      - Exists
                                      - DoesNotExist
                                      - Gt
                                      - Lt
                                      - GtLt
                                      - IsTrue
                                      - IsFalse
                                      type: string
                                    value:
                                      description: Value is the list of values that the
                                        operand evaluates the input against. Value should
                                        be empty if the operator is Exists, DoesNotExist,
                                        IsTrue or IsFalse. Value should contain exactly
                                        one element if the operator is Gt or Lt and exactly
                                        two elements if the operator is GtLt. In other
                                        cases Value should contain at least one element.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - op
                                  type: object
                                description: MatchExpressions is the set of per-element
                                  expressions evaluated. These match against the value
                                  of the specified elements.
                                type: object
                              matchName:
                                description: MatchName in an expression that is matched
                                  against the name of each element in the feature set.
                                properties:
                                  op:
                                    description: Op is the operator to be applied.
                                    enum:
                                    - In
                                    - NotIn
                                    - InRegexp
                                    - Exists
                                    - DoesNotExist
                                    - Gt
                                    - Lt
                                    - GtLt
                                    - IsTrue
                                    - IsFalse
                                    type: string
                                  value:
                                    description: Value is the list of values that the
                                      operand evaluates the input against. Value should
                                      be empty if the operator is Exists, DoesNotExist,
                                      IsTrue or IsFalse. Value should contain exactly
                                      one element if the operator is Gt or Lt and exactly
                                      two elements if the operator is GtLt. In other cases
                                      Value should contain at least one element.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - op
                                type: object
                            required:
                            - feature
                            type: object
                          type: array
                        name:
                          description: Name of the rule.
                          type: string
                        taints:
                          description: Taints to create if the rule matches.
                          items:
                            description: The node this Taint is attached to has the "effect"
                              on any pod that does not tolerate the Taint.
                            properties:
                              effect:
                                description: Required. The effect of the taint on pods
                                  that do not tolerate the taint. Valid effects are NoSchedule,
                                  PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Required. The taint key to be applied to
                                  a node.
                                type: string
                              timeAdded:
                                description: TimeAdded represents the time at which the
                                  taint was added. It is only written for NoExecute taints.
                                format: date-time
                                type: string
                              value:
                                description: The taint value corresponding to the taint
                                  key.
                                type: string
                            required:
                            - effect
                            - key
                            type: object
                          type: array
                        vars:
                          additionalProperties:
                            type: string
                          description: Vars is the variables to store if the rule matches.
                            Variables do not directly inflict any changes in the node
                            object. However, they can be referenced from other rules enabling
                            more complex rule hierarchies, without exposing intermediary
                            output values as labels.
                          type: object
                        varsTemplate:
                          description: VarsTemplate specifies a template to expand for
                            dynamically generating multiple variables. Data (after template
                            expansion) must be keys with an optional value (<key>[=<value>])
                            separated by newlines.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                required:
                - rules
                type: object
            required:
            - spec
            type: object
        served: true
        storage: true
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-gc
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-worker
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    data:
      nfd-master.conf: "null"
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-master-conf
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    data:
      nfd-topology-updater.conf: "null"
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-topology-updater-conf
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    data:
      nfd-worker.conf: |-
        sources:
          pci:
            deviceLabelFields:
            - class
            - vendor
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-worker-conf
      namespace: node-feature-discovery
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      - nodes/status
      verbs:
      - get
      - patch
      - update
      - list
    - apiGroups:
      - nfd.k8s-sigs.io
      resources:
      - nodefeatures
      - nodefeaturerules
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - coordination.k8s.io
      resources:
      - leases
      verbs:
      - create
    - apiGroups:
      - coordination.k8s.io
      resourceNames:
      - nfd-master.nfd.kubernetes.io
      resources:
      - leases
      verbs:
      - get
      - update
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-gc
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - nodes/proxy
      verbs:
      - get
    - apiGroups:
      - topology.node.k8s.io
      resources:
      - noderesourcetopologies
      verbs:
      - delete
      - list
    - apiGroups:
      - nfd.k8s-sigs.io
      resources:
      - nodefeatures
      verbs:
      - delete
      - list
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: node-feature-discovery
    subjects:
    - kind: ServiceAccount
      name: node-feature-discovery
      namespace: node-feature-discovery
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-gc
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: node-feature-discovery-gc
    subjects:
    - kind: ServiceAccount
      name: node-feature-discovery-gc
      namespace: node-feature-discovery
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-worker
      namespace: node-feature-discovery
    rules:
    - apiGroups:
      - nfd.k8s-sigs.io
      resources:
      - nodefeatures
      verbs:
      - create
      - get
      - update
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
      name: node-feature-discovery-worker
      namespace: node-feature-discovery
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: node-feature-discovery-worker
    subjects:
    - kind: ServiceAccount
      name: node-feature-discovery-worker
      namespace: node-feature-discovery
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
        role: worker
      name: node-feature-discovery-worker
      namespace: node-feature-discovery
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/instance: node-feature-discovery
          app.kubernetes.io/name: node-feature-discovery
          role: worker
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: node-feature-discovery
            app.kubernetes.io/name: node-feature-discovery
            role: worker
        spec:
          containers:
          - args:
            - -metrics=8081
            command:
            - nfd-worker
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            image: registry.k8s.io/nfd/node-feature-discovery:v0.15.2-minimal
            imagePullPolicy: IfNotPresent
            name: worker
            ports:
            - containerPort: 8081
              name: metrics
            resources: {}
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
            volumeMounts:
            - mountPath: /host-boot
              name: host-boot
              readOnly: true
            - mountPath: /host-etc/os-release
              name: host-os-release
              readOnly: true
            - mountPath: /host-sys
              name: host-sys
              readOnly: true
            - mountPath: /host-usr/lib
              name: host-usr-lib
              readOnly: true
            - mountPath: /host-lib
              name: host-lib
              readOnly: true
            - mountPath: /etc/kubernetes/node-feature-discovery/source.d/
              name: source-d
              readOnly: true
            - mountPath: /etc/kubernetes/node-feature-discovery/features.d/
              name: features-d
              readOnly: true
            - mountPath: /etc/kubernetes/node-feature-discovery
              name: nfd-worker-conf
              readOnly: true
          dnsPolicy: ClusterFirstWithHostNet
          securityContext: {}
          serviceAccountName: node-feature-discovery-worker
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
          volumes:
          - hostPath:
              path: /boot
            name: host-boot
          - hostPath:
              path: /etc/os-release
            name: host-os-release
          - hostPath:
              path: /sys
            name: host-sys
          - hostPath:
              path: /usr/lib
            name: host-usr-lib
          - hostPath:
              path: /lib
            name: host-lib
          - hostPath:
              path: /etc/kubernetes/node-feature-discovery/source.d/
            name: source-d
          - hostPath:
              path: /etc/kubernetes/node-feature-discovery/features.d/
            name: features-d
          - configMap:
              items:
              - key: nfd-worker.conf
                path: nfd-worker.conf
              name: node-feature-discovery-worker-conf
            name: nfd-worker-conf
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
        role: master
      name: node-feature-discovery-master
      namespace: node-feature-discovery
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: node-feature-discovery
          app.kubernetes.io/name: node-feature-discovery
          role: master
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: node-feature-discovery
            app.kubernetes.io/name: node-feature-discovery
            role: master
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                    - ""
                weight: 1
              - preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: In
                    values:
                    - ""
                weight: 1
          containers:
          - args:
            - -extra-label-ns=nvidia.com,beta.amd.com,amd.com
            - -crd-controller=true
            - -metrics=8081
            command:
            - nfd-master
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: registry.k8s.io/nfd/node-feature-discovery:v0.15.2-minimal
            imagePullPolicy: IfNotPresent
            livenessProbe:
              grpc:
                port: 8080
              initialDelaySeconds: 10
              periodSeconds: 10
            name: master
            ports:
            - containerPort: 8080
              name: grpc
            - containerPort: 8081
              name: metrics
            readinessProbe:
              failureThreshold: 10
              grpc:
                port: 8080
              initialDelaySeconds: 5
              periodSeconds: 10
            resources: {}
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
            volumeMounts:
            - mountPath: /etc/kubernetes/node-feature-discovery
              name: nfd-master-conf
              readOnly: true
          enableServiceLinks: false
          securityContext: {}
          serviceAccountName: node-feature-discovery
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Equal
            value: ""
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Equal
            value: ""
          volumes:
          - configMap:
              items:
              - key: nfd-master.conf
                path: nfd-master.conf
              name: node-feature-discovery-master-conf
            name: nfd-master-conf
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.15.2
        helm.sh/chart: node-feature-discovery-0.15.2
        role: gc
      name: node-feature-discovery-gc
      namespace: node-feature-discovery
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: node-feature-discovery
          app.kubernetes.io/name: node-feature-discovery
          role: gc
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: node-feature-discovery
            app.kubernetes.io/name: node-feature-discovery
            role: gc
        spec:
          containers:
          - args:
            - -gc-interval=1h
            command:
            - nfd-gc
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: registry.k8s.io/nfd/node-feature-discovery:v0.15.2-minimal
            imagePullPolicy: IfNotPresent
            name: gc
            ports:
            - containerPort: 8081
              name: metrics
            resources: {}
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
          dnsPolicy: ClusterFirstWithHostNet
          securityContext: {}
          serviceAccountName: node-feature-discovery-gc
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: '{{ .Values.hooks.nfd.crsStrategy.defaultInstallationConfigMap.name }}'
