{{- if .Values.hooks.clusterAutoscaler.helmAddonStrategy.defaultValueTemplateConfigMap.create }}
apiVersion: v1
data:
  values.yaml: |
    # Copyright 2023 Nutanix. All rights reserved.
    # SPDX-License-Identifier: Apache-2.0

    ---
    # This is a hack, but because a single cluster-autoscaler deployment can only monitor a single Kubernetes cluster
    # we expect '"{{ `{{ .Cluster.Name }}` }}"' and '"{{ `{{ .Cluster.Namespace }}` }}"'
    # to be replaced with the Cluster's name and namespace.
    fullnameOverride: cluster-autoscaler-"{{ `{{ .Cluster.Name }}` }}"

    cloudProvider: clusterapi

    # Always trigger a scale-out if replicas are less than the min.
    extraArgs:
      enforce-node-group-min-size: true

    # Enable it to run in a 1 Node cluster.
    tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane

    # Limit a single cluster-autoscaler Deployment to a single Cluster.
    autoDiscovery:
      clusterName: "{{ `{{ .Cluster.Name }}` }}"
      # The controller failed with an RBAC error trying to watch CAPI objects at the cluster scope without this.
      labels:
        - namespace: "{{ `{{ .Cluster.Namespace }}` }}"

    clusterAPIConfigMapsNamespace: "{{ `{{ .Cluster.Namespace }}` }}"
    # For workload clusters it is not possible to use the in-cluster client.
    # To simplify the configuration, use the admin kubeconfig generated by CAPI for all clusters.
    clusterAPIMode: kubeconfig-incluster
    clusterAPIWorkloadKubeconfigPath: /cluster/kubeconfig
    extraVolumeSecrets:
      kubeconfig:
        name: "{{ `{{ .Cluster.Name }}` }}"-kubeconfig
        mountPath: /cluster
        readOnly: true
        items:
          - key: value
            path: kubeconfig
    rbac:
      # Create a Role instead of a ClusterRoles to update cluster-api objects
      clusterScoped: false
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: '{{.Values.hooks.clusterAutoscaler.helmAddonStrategy.defaultValueTemplateConfigMap.name}}'
{{- end -}}