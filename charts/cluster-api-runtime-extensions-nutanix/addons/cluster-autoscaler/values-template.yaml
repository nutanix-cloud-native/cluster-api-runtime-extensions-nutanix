fullnameOverride: "cluster-autoscaler-{{ index .Cluster.Annotations "caren.nutanix.com/cluster-uuid" }}"

cloudProvider: clusterapi

# Always trigger a scale-out if replicas are less than the min.
extraArgs:
  enforce-node-group-min-size: true

# Enable it to run in a 1 Node cluster.
tolerations:
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane

# Limit a single cluster-autoscaler Deployment to a single Cluster.
autoDiscovery:
  clusterName: "{{ .Cluster.Name }}"
  # The controller failed with an RBAC error trying to watch CAPI objects at the cluster scope without this.
  labels:
    - namespace: "{{ .Cluster.Namespace }}"

# For workload clusters it is not possible to use the in-cluster client.
# To simplify the configuration, use the admin kubeconfig generated by CAPI for all clusters.
clusterAPIMode: kubeconfig-incluster
clusterAPIWorkloadKubeconfigPath: /cluster/kubeconfig
extraVolumeSecrets:
  kubeconfig:
    name: "{{ .Cluster.Name }}-kubeconfig"
    mountPath: /cluster
    readOnly: true
    items:
      - key: value
        path: kubeconfig
rbac:
  # Create a Role instead of a ClusterRoles to update cluster-api objects
  clusterScoped: false
{{- $capiProvider := index .Cluster.Labels "cluster.x-k8s.io/provider" }}
{{- if eq $capiProvider "aws" }}
  additionalRules:
    - apiGroups:
      - infrastructure.cluster.x-k8s.io
      resources:
      - awsmachinetemplates
      verbs:
      - get
      - list
      - watch
{{- else if eq $capiProvider "docker" }}
  additionalRules:
    - apiGroups:
      - infrastructure.cluster.x-k8s.io
      resources:
      - dockermachinetemplates
      verbs:
      - get
      - list
      - watch
{{- else if eq $capiProvider "nutanix" }}
  additionalRules:
    - apiGroups:
      - infrastructure.cluster.x-k8s.io
      resources:
      - nutanixmachinetemplates
      verbs:
      - get
      - list
      - watch
{{- end }}
